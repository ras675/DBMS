CREATE TABLE ACCOUNTPROPERTY
(
    ID INT PRIMARY KEY,
    NAME VARCHAR2(20),
    PROFITRATE NUMERIC,
    GRACEPERIOD INT
);
CREATE TABLE ACCOUNT
(
    ID INT PRIMARY KEY,
    NAME VARCHAR2(20),
    ACCCODE INT,
    OPDATE TIMESTAMP,
    LASTDATEINT TIMESTAMP,
    CONSTRAINT FK1 FOREIGN KEY (ACCCODE) REFERENCES ACCOUNTPROPERTY(ID)
);
CREATE TABLE TRANSACTION
(
    TID INT,
    ACCNO INT,
    AMOUNT NUMERIC,
    TRANSACTIONDATE TIMESTAMP,
    CONSTRAINT FK2 FOREIGN KEY (ACCNO) REFERENCES ACCOUNT(ID)
);
CREATE TABLE BALANCE
(
    ACCNO INT,
    PRINCIPALAMOUNT NUMERIC,
    PROFITAMOUNT NUMERIC,
    CONSTRAINT FK3 FOREIGN KEY (ACCNO) REFERENCES ACCOUNT(ID)
);
-----------------------------------------------------------------
CREATE SEQUENCE GENERATE START WITH 100000 INCREMENT BY 1;

CREATE OR REPLACE FUNCTION A_ID(NAIME VARCHAR2,CODE INT,OP TIMESTAMP)
RETURN VARCHAR2
IS
CODECHAR VARCHAR2(4);
TYME VARCHAR2(8);
NAM VARCHAR2(3);
SEID VARCHAR2(6);
BEGIN
NAM:= SUBSTR(NAIME,1,3);
CODECHAR:=TO_CHAR(CODE);
TYME:=TO_CHAR(OP,'YYYYMMDD');
SEID:=TO_CHAR(GENERATE.NEXTVAL);
RETURN CODECHAR || TYME || '.' || NAM || '.' || SEID;
END;
/

DECLARE
NAM VARCHAR2(20);
ACCODE INT;
DAITE TIMESTAMP;
BEGIN
NAM := '&INPUT';
ACCODE := &CODE;
DAITE := TO_TIMESTAMP('&TYME','YYYY-MM-DD');
DBMS_OUTPUT.PUT_LINE('ACCOUNT ID: ' || A_ID(NAM,ACCODE,DAITE));
END;
/
----------------------------------------------------------------
CREATE TABLE ACCOUNTPROPERTY
(
    ID INT PRIMARY KEY,
    NAME VARCHAR2(20),
    PROFITRATE NUMERIC,
    GRACEPERIOD INT
);
CREATE TABLE ACCOUNT
(
    ACCOUNT_ID VARCHAR2(30) PRIMARY KEY,
    NAME VARCHAR2(20),
    ACCCODE INT,
    OPDATE TIMESTAMP,
    LASTDATEINT TIMESTAMP,
    CONSTRAINT FK1 FOREIGN KEY (ACCCODE) REFERENCES ACCOUNTPROPERTY(ID)
);
CREATE TABLE TRANSACTION
(
    TID INT,
    ACCNO VARCHAR2(30),
    AMOUNT NUMERIC,
    TRANSACTIONDATE TIMESTAMP,
    CONSTRAINT FK2 FOREIGN KEY (ACCNO) REFERENCES ACCOUNT(ACCOUNT_ID)
);
CREATE TABLE BALANCE
(
    ACCNO VARCHAR2(30),
    PRINCIPALAMOUNT NUMERIC,
    PROFITAMOUNT NUMERIC,
    CONSTRAINT FK3 FOREIGN KEY (ACCNO) REFERENCES ACCOUNT(ACCOUNT_ID)
);
----------------------------------------------------------------
CREATE OR REPLACE TRIGGER ROW_FORMER
BEFORE INSERT ON ACCOUNT
FOR EACH ROW
DECLARE
ACC_ID VARCHAR2(30);
BEGIN
ACC_ID:=A_ID(:NEW.NAME, :NEW.ACCCODE, :NEW.OPDATE);

:NEW.ACCOUNT_ID:=ACC_ID;
END;
/
INSERT INTO ACCOUNT (NAME,ACCCODE,OPDATE,LASTDATEINT) VALUES ('Tausif',2002,TO_TIMESTAMP('2023-11-19','YYYY-MM-DD'),TO_TIMESTAMP('2026-09-18','YYYY-MM-DD') );
INSERT INTO ACCOUNT (NAME,ACCCODE,OPDATE,LASTDATEINT) VALUES ('Ghost',3003,TO_TIMESTAMP('2013-11-09','YYYY-MM-DD'),TO_TIMESTAMP('2029-10-18','YYYY-MM-DD') );
INSERT INTO ACCOUNT (NAME,ACCCODE,OPDATE,LASTDATEINT) VALUES ('Simon',4004,TO_TIMESTAMP('2021-11-19','YYYY-MM-DD'),TO_TIMESTAMP('2026-09-22','YYYY-MM-DD') );
-----------------------------------------------------------------
CREATE OR REPLACE TRIGGER MONE
AFTER INSERT ON ACCOUNT
FOR EACH ROW
DECLARE
BEGIN
INSERT INTO BALANCE (ACCNO,PRINCIPALAMOUNT,PROFITAMOUNT) VALUES (:NEW.ACCOUNT_ID, 5000,0);
END;
/
----------------------------------------------------------------
CREATE OR REPLACE TRIGGER ADD_MONE
AFTER INSERT ON TRANSACTION
FOR EACH ROW
BEGIN
UPDATE BALANCE
SET PRINCIPALAMOUNT=PRINCIPALAMOUNT+:NEW.AMOUNT WHERE ACCNO=:NEW.ACCNO;
END;
/
INSERT INTO TRANSACTION VALUES(123,'500520131109.Gho.100007',5500,TO_TIMESTAMP('2023-09-18','YYYY-MM-DD'));