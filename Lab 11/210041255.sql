CREATE OR REPLACE PROCEDURE TOT_TIME(NAM VARCHAR2)
IS
RUNTIME NUMBER;
BREAK INT;
TOTAL INT;
COPYTIME NUMBER;
BEGIN
TOTAL:=0;
BREAK:=0;
FOR MOV_NAME IN(SELECT MOV_TITLE,MOV_TIME FROM MOVIE)

LOOP
IF(MOV_NAME.MOV_TITLE = NAM) THEN
RUNTIME:=MOV_NAME.MOV_TIME;
EXIT;
END IF;
END LOOP;
COPYTIME:=RUNTIME;
LOOP
RUNTIME:=RUNTIME-70;
IF(RUNTIME>30) THEN
RUNTIME:=RUNTIME-70;
BREAK:=BREAK+1;
ELSE
EXIT;
END IF;
END LOOP;

TOTAL:=COPYTIME+(BREAK*15);
DBMS_OUTPUT.PUT_LINE('TOTAL TIME: ' || TOTAL);
END;
/

DECLARE
NAME VARCHAR2(50);
BEGIN
NAME := '&INPUT';
TOT_TIME(NAME);
END;
/
-----------------------------------------------
CREATE PROCEDURE FIND_TOPN(VAL INT)
IS
I INT:=0;
BEGIN
FOR MOV_DATA IN(select avg(r.rev_stars) average, min(m.mov_title) name from movie m inner join rating r on r.mov_id=m.mov_id
			group by r.mov_id 
				order by avg(r.rev_stars) desc)
LOOP
EXIT WHEN I=VAL;
DBMS_OUTPUT.PUT_LINE('Name of title: ' || MOV_DATA.name);
DBMS_OUTPUT.PUT_LINE('Average rating: ' || MOV_DATA.average);
I:=I+1;
END LOOP;
END;
/
----------------------------------------------
CREATE OR REPLACE FUNCTION YEEE(NAM VARCHAR2)
RETURN FLOAT
IS
YEARLY FLOAT;
YEA NUMBER;
CURR_YEAR NUMBER;
BEGIN
YEARLY:= 10;
SELECT TO_NUMBER(EXTRACT(YEAR FROM SYSDATE)) INTO CURR_YEAR FROM dual;
FOR MOV_DATA IN(select m.mov_title as mov, r.rev_stars as rate, m.mov_year as y from movie m inner join rating r on m.mov_id=r.mov_id where r.rev_stars>=6)
LOOP
IF(MOV_DATA.mov = NAM) THEN
YEA:= MOV_DATA.y;
YEARLY:= YEARLY + 10;
END IF;
END LOOP;
DBMS_OUTPUT.PUT_LINE('CURRENT YEAR: ' || CURR_YEAR || ' YEAR OF MOVIE: ' || YEA || ' INCOME: ' || YEARLY);
RETURN YEARLY/(CURR_YEAR - YEA);
END;
/

DECLARE
NAME VARCHAR2(50);
BEGIN
NAME := '&INPUT';
DBMS_OUTPUT.PUT_LINE('YEARLY INCOME: ' || YEEE(NAME) );
END;
/
-------------------------------------------
CREATE OR REPLACE FUNCTION STAT(GEN VARCHAR2)
RETURN VARCHAR2
IS
AVG_ALLRATE FLOAT;
AVG_ALLREV FLOAT;
GENCOUNT INT;
REVCOUNT INT;
MYGENRATE FLOAT;
MYGENCOUNT INT;
BEGIN
SELECT AVG(REV_STARS) INTO AVG_ALLRATE FROM RATING;
SELECT COUNT(GEN_ID) INTO GENCOUNT FROM MTYPE;
SELECT COUNT(REV_ID) INTO REVCOUNT FROM RATING;
AVG_ALLREV:=REVCOUNT/GENCOUNT;

SELECT AVG(REV_STARS), COUNT(REV_ID) INTO MYGENRATE, MYGENCOUNT FROM RATING WHERE MOV_ID IN (SELECT MOV_ID FROM MTYPE WHERE GEN_ID IN (SELECT GEN_ID FROM GENRES WHERE GEN_TITLE = GEN));
IF(MYGENRATE<AVG_ALLRATE AND MYGENCOUNT>AVG_ALLREV) THEN
RETURN 'WIDELY WATCHED';
ELSIF(MYGENRATE>AVG_ALLRATE AND MYGENCOUNT<AVG_ALLREV) THEN
RETURN 'HIGHLY RATED';
ELSIF(MYGENRATE>AVG_ALLRATE AND MYGENCOUNT>AVG_ALLREV) THEN
RETURN 'PEOPLE''S FAVOURITE';
ELSE
RETURN 'SO SO';
END IF;
END;
/

DECLARE
NAME VARCHAR2(20);
BEGIN
NAME := '&INPUT';
DBMS_OUTPUT.PUT_LINE(STAT(NAME) );
END;
/
----------------------------------------------------
CREATE OR REPLACE FUNCTION MOS_FREQ(YEAR1 NUMBER, YEAR2 NUMBER)
RETURN VARCHAR2
IS
MAX_COU INT;
GID INT;
FREQGENRE VARCHAR2(20);
BEGIN
MAX_COU:=-1;
FOR MOV_DATA IN(select count(g.mov_id) COU,g.gen_id ID from mtype g inner join movie m on m.mov_id=g.mov_id where m.mov_year>YEAR1 and m.mov_year<YEAR2 group by g.gen_id)
LOOP
IF (MOV_DATA.COU>MAX_COU) THEN
MAX_COU:=MOV_DATA.COU;
GID:=MOV_DATA.ID;
END IF;
END LOOP;
SELECT GEN_TITLE INTO FREQGENRE FROM GENRES WHERE GEN_ID=GID;
RETURN FREQGENRE;
END;
/

DECLARE
Y1 NUMBER;
Y2 NUMBER;
BEGIN
Y1 := &YEAR1;
Y2 := &YEAR2;
DBMS_OUTPUT.PUT_LINE('MOST WATCHED GENRE: ' || MOS_FREQ(Y1, Y2) );
END;
/